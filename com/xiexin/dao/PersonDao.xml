<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace:映射文件的命名空间，规范是映射文件的全路径-->
<!--作用：是一个路径，用来查找下面的id-->
<mapper namespace="com.xiexin.dao.PersonDao">
    <resultMap id="BaseResultMap" type="com.xiexin.bean.Person">
        <!--下面的标签映射实现实体类-->
        <!--id只有一个-->
        <!--colimn是数据库中的列名   很多是   下划线-->
        <!--property是实体类中的属性   一般是驼峰-->
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="gendle" property="gendle" />
        <result column="brithday" property="brithday" />
        <result column="address" property="address" />
        <result column="score" property="score" />
    </resultMap>

    <!--SQL 片段-->
    <sql id="allColumn">
      id,name,gender,birthday,address

    </sql>
    <!--隐藏生日的SQL片段-->
    <sql id="birthdayColumn">
      id,name,gender,birthday,address

    </sql>
    <select id="selectAll" resultMap="BaseResultMap">
    select * from person
    </select>


    <!--SQL 语句中携带参数  其实就是指的 where 语句 parameterType Parmeter:参数的 type 类型 （int， string ，map，set  ，list）-->
    <!--select * from person  where  gender = 2-->
    <select id="selectPersonBySex" resultMap="BaseResultMap" parameterType="int">
        select  <include refid="birthdayColumn"/> from  person where  gender = #{sex}
    </select>

    <!--select count（*）from person -->

    <select id="selectCount" resultType="long">
    select  count(*) from person
    </select>

    <!--查询女生总条数有几个: select count(*) from person where sex=2 and score>100-->
    <!--当前端 传来多个参数的时候 你需要看这几个参数 是否是同一个类中的属性-->
    <!--如果是 那么直接可以用这个类做参数，-->
    <!--如果 不是 同一个 类中的（这个是多表） 那么 可以手写一个参数的实体类(dao)-->

    <select id="selectCountByParam01" resultType="long" parameterType="com.xiexin.bean.Person">
          select count(*) from person where gender=#{gender} and score>#{score}
    </select>


    <!--查询性别是2，且生日小于2020-10-14的人有哪些-->
    <!--select * from person where gender=#{gender} and birthday>=#{birthday}-->
    <select id="selectCountByParam02" resultMap="BaseResultMap" parameterType="map">
        <![CDATA[select * from person where gender=#{gender} and birthday<#{birthday}]]>
    </select>

    <!--1. 查询 分值最高的人是谁 ？select * from person where score = (select max(score) from person)-->
    <select id="selectPersonByZi" resultMap="BaseResultMap">
        select * from person where score = (select max(score) from person)
    </select>

    <!--分组查询-->
    <!--2. 所有男生和女生的平均分值是多少 ？ select gender,avg(score) as avgScore from person GROUP BY gender-->
    <select id="selectAvgScore" resultType="com.xiexin.dto.PersonDTO">
        select gender,avg(score) as avgScore from person GROUP BY gender
    </select>

    <!--2. 所有男生和女生的平均分值是多少 ？ select gender,avg(score) as avgScore from person GROUP BY gender having avg(score) >200-->
    <select id="selectAvgScoreParam" resultType="com.xiexin.dto.PersonDTO" parameterType="int">
        select gender,avg(score) as avgScore from person GROUP BY gender having avg(score) > #{score}
    </select>

    <!--用map可以接收任何的数据，常见于多表-->
    <select id="selectAvgScoreParam02" resultType="map" parameterType="int">
         select gender,avg(score) as avgScore from person GROUP BY gender having avg(score) > #{score}
    </select>
    <!--//查询姓孙de  模糊查询第一种方式:使用$去拼接 但是这样不好，因为是拼接的，sql编译的时候没有？容易被黑客注入不安全-->
    <!--select *from person where name like '孙%'-->
    <select id="selectPersonByLike" resultMap="BaseResultMap" parameterType="String">
        select * from person where name like '${name}%'
    </select>
    <!--//查询姓孙de  模糊查询第二种方式:使用sql语句count链接 是可以-->
    <select id="selectPersonByLike02" resultMap="BaseResultMap" parameterType="String">
        select * from person where name like concat ('%',#{name},'%')
     </select>
    <!--//查询姓孙de  模糊查询第三种方式:谢欣常用的-->
    <select id="selectPersonByLike03" resultMap="BaseResultMap" parameterType="String">
             select * from person where name like "%"#{name}"%"
    </select>

    <!--增加一条数据 insert into person(id,name,gender,birthday,address,score) values(null,#{name}..)-->
    <!--场景：学生多，班级1，当我，张三，李四王五，大数据，班级表-->
    <!--插入数据之后，自动上报我们的主键id 很重要-->
    <!--selectKey一般多表级联插入的时候，需要获取刚刚插入的数据的主键id的时候，用到的-->
    <!--keyProperty是指的主键的id-->
    <!--order指的是自增的主键是数据插入后诞生的还是插入前诞生的，mysql after,order 前-->
    <!--resultType主键id的数据类型，一般int，分布式string雪花算法-->
    <!--select LAST_INSERT_ID()查询最后插入的主键id-->
    <insert id="insertPerson" parameterType="com.xiexin.bean.Person">
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into person (id,name,gender,birthday,address,score)
        values(null,#{name},#{gender},#{birthday},#{address},#{score})
    </insert>

    <!--删除一条数据-->
    <delete id="deletePersonById" parameterType="int">
        delete from person where id=#{id}
    </delete>

    <!--动态sql之动态查询 通俗讲select+if判断-->
    <!--动态sql有9个  第一个where，1.删除第一个and   2.代替了原始sql中的where，where常和if搭配-->
    <!--where里需要把方法里的参数（map，实体类）的属性写全-->
    <!--if的注意事项 test="gender 是指的实体类中的属性，驼峰的-->
    <select id="dongTaiSelect" resultMap="BaseResultMap" parameterType="com.xiexin.bean.Person">
        select * from person p
        <where>
            <if test="id != null and id !='' ">
                p.id =#{id}
            </if>
            <if test="name != null and name !='' ">
                and p.name =#{name}
            </if>
            <if test="gender != null and gender !='' ">
                and p.gender =#{gender}
            </if>
            <if test="birthday != null and birthday !='' ">
                and p.birthday =#{birthday}
            </if>
            <if test="address != null and address !='' ">
                and p.address =#{address}
            </if>
            <if test="score != null and score !='' ">
                and p.score >#{score}
            </if>
        </where>
    </select>

    <!--动态修改 updata person set xx=xx where id=?-->
    <update id="dongTaiUpdata" parameterType="com.xiexin.bean.Person">
        update person p <set>
        <if test="name != null and name !='' ">
            p.name =#{name},
        </if>
        <if test="gender != null and gender !='' ">
            p.gender =#{gender},
        </if>
        <if test="birthday != null  ">
            p.birthday =#{birthday},
        </if>
        <if test="address != null and address !='' ">
            p.address =#{address},
        </if>
        <if test="score != null and score !='' ">
            p.score >#{score}
        </if>
    </set>
        where p.id=#{id}
    </update>
    <!--批量删除-->
    <!--delete from person where id in(1,2,3,4)-->
    <!--(1,2,3,4)把当作一个集合看待 ids-->
    <delete id="piLiangDel" parameterType="map">
        delete from person where id in
        <foreach collection="ids" open="(" item="id" separator="," close=")" index="index">
            #{id}
        </foreach>
    </delete>

    <!--多表的关系 需要程序员自定义一个 resultMap的标签                           extends 继承 -->
    <resultMap id="selectOrdersByPersonIdRM" type="com.xiexin.bean.Person" extends="BaseResultMap">
<!--        <id column="id" property="id" />-->
<!--        <result column="name" property="name" />-->
<!--        <result column="gendle" property="gendle" />-->
<!--        <result column="brithday" property="brithday" />-->
<!--        <result column="address" property="address" />-->
<!--        <result column="score" property="score" />-->
            <collection property="ordersList" ofType="com.xiexin.bean.Orders">
                <id column="orders_id" jdbcType="INTEGER" property="ordersId" />
                <result column="person_id" jdbcType="INTEGER" property="personId" />
                <result column="total_price" jdbcType="DOUBLE" property="totalPrice" />
                <result column="addr" jdbcType="VARCHAR" property="addr" />
            </collection>
    </resultMap>
    <!-- 1 对多的 查询-->
    <resultMap id="selsectDetailByPersonIdRM" type="com.xiexin.bean.Person" extends="BaseResultMap">
        <collection property="ordersList" ofType="com.xiexin.bean.Orders">
            <id column="orders_id" jdbcType="INTEGER" property="ordersId" />
            <result column="person_id" jdbcType="INTEGER" property="personId" />
            <result column="total_price" jdbcType="DOUBLE" property="totalPrice" />
            <result column="addr" jdbcType="VARCHAR" property="addr" />
        </collection>

        <collection property="orderDetails" ofType="com.xiexin.bean.OrderDetail">
            <id column="detail_id" jdbcType="INTEGER" property="detailId" />
            <result column="order_id" jdbcType="INTEGER" property="orderId" />
            <result column="item_name" jdbcType="VARCHAR" property="itemName" />
            <result column="price" jdbcType="DOUBLE" property="price" />
            <result column="count" jdbcType="INTEGER" property="count" />
        </collection>
    </resultMap>

     <!-- 1对多 查询  Person-->
    <select id="selectOrdersByPersonId" resultMap="selectOrdersByPersonIdRM" parameterType="int">
        SELECT * FROM person p
        join orders o
        on p.id = o.person_id
        where p.id=#{id}
    </select>

    <!-- 1对多 对多的查询 Detail-->
    <select id="selsectDetailByPersonId" resultMap="selsectDetailByPersonIdRM" parameterType="int">
            SELECT * FROM person p
        join orders o on o.person_id = p.id
        join order_detail od on od.order_id = o.orders_id
        where p.id = #{id}

    </select>

    <!-- N表联查, 随意传参数  随意返回值 牛掰的不得了-->
    <select id="selsectDetailByParam" resultType="map" parameterType="map">
            SELECT * FROM person p
        join orders o on o.person_id = p.id
        join order_detail od on od.order_id = o.orders_id
        <where>
            <if test="id !=null">
                p.id=#{id}
            </if>
            <if test="name !=null">
              and  p.name =#{p.name}
            </if>
        </where>

    </select>

    <!-- 多对多 的 查询  根据人 查他的角色 -->
        <resultMap id="selectRoleByNameRM" type="com.xiexin.bean.Person" extends="BaseResultMap">
            <collection property="roleList" ofType="com.xiexin.bean.Role">
                <id column="role_id" jdbcType="INTEGER" property="roleId" />
                <result column="role_name" jdbcType="VARCHAR" property="roleName" />
                <result column="desc" jdbcType="VARCHAR" property="desc" />
            </collection>
        </resultMap>
    <select id="selectRoleByName" resultMap="selectRoleByNameRM" parameterType="string">
         select * from person p join person_role prr
        on prr.personid = p.id join role r
        on r.role_id = prr.roleid where p.name= #{name}
    </select>

    <select id="selectByPrimaryKey" resultMap="com.xiexin.bean.Account" parameterType="int">
        SELECT * FROM account where account_id = #{id}
    </select>

    <select id="selectByParam" resultMap="com.xiexin.bean.Account" parameterType="string">
        SELECT * FROM account where account_num = #{name}
    </select>

    <select id="selectByParam" resultType="map" parameterType="map">
        SELECT * FROM account where
                account_num = #{name}
             and account_pwd = #{pwd}


    </select>

</mapper>